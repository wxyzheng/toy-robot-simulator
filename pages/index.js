import Head from 'next/head';
import styles from '../styles/Home.module.css';
import TextareaAutosize from '@mui/material/TextareaAutosize';
import { useState } from 'react';
import styled from 'styled-components';
import { Alert, Button } from '@mui/material';

const TABLETOP_DIMENSION = 5;

export default function Home() {
  const [commands, setCommands] = useState(''); //input commands
  const [report, setReport] = useState(''); //report output
  const [showError, setShowError] = useState(''); //error messages

  let currentPosition = { x: 0, y: 0 };
  let currentDirection = '';
  let currentReport = '';
  const placeCommandRegex =
    /^PLACE ([0-5]),([0-5]),((NORTH)|(WEST)|(EAST)|(SOUTH))$/;

  const move = (currentDirection, currentPosition) => {
    let currX = currentPosition.x;
    let currY = currentPosition.y;
    if (currentDirection === 'NORTH') {
      currY = currentPosition.y + 1;
    } else if (currentDirection === 'SOUTH') {
      currY = currentPosition.y - 1;
    } else if (currentDirection === 'EAST') {
      currX = currentPosition.x + 1;
    } else if (currentDirection === 'WEST') {
      currX = currentPosition.x - 1;
    }
    // check that x and y coordinates are within the 5x5 range
    if (
      currY >= 0 &&
      currY < TABLETOP_DIMENSION &&
      currX >= 0 &&
      currX < TABLETOP_DIMENSION
    ) {
      return {
        x: currX,
        y: currY,
      };
    } else {
      return {
        x: currentPosition.x,
        y: currentPosition.y,
      };
    }
  };

  const left = (currentDirection) => {
    if (currentDirection === 'NORTH') {
      return 'WEST';
    }
    if (currentDirection === 'SOUTH') {
      return 'EAST';
    }
    if (currentDirection === 'WEST') {
      return 'SOUTH';
    }
    if (currentDirection === 'EAST') {
      return 'NORTH';
    }
  };

  const right = (currentDirection) => {
    if (currentDirection === 'NORTH') {
      return 'EAST';
    }
    if (currentDirection === 'SOUTH') {
      return 'WEST';
    }
    if (currentDirection === 'WEST') {
      return 'NORTH';
    }
    if (currentDirection === 'EAST') {
      return 'SOUTH';
    }
  };

  const getReport = (currentPosition, currentDirection, currentReport) => {
    if (currentPosition && currentDirection) {
      const newResult =
        currentPosition.x + ',' + currentPosition.y + ',' + currentDirection;
      const currentResult = currentReport
        ? currentReport + '\n' + newResult
        : newResult;
      return currentResult;
    }
  };
  const processCommand = (command) => {
    switch (true) {
      case placeCommandRegex.test(command):
        const commandGroups = command.match(placeCommandRegex);
        // set x and y coordinates
        currentPosition = {
          x: Number(commandGroups[1]),
          y: Number(commandGroups[2]),
        };
        // set direction
        currentDirection = commandGroups[3];
        break;
      case /^MOVE$/.test(command):
        currentPosition = move(currentDirection, currentPosition);
        break;
      case /^LEFT$/.test(command):
        currentDirection = left(currentDirection);
        break;
      case /^RIGHT$/.test(command):
        currentDirection = right(currentDirection);
        break;
      case /^REPORT$/.test(command):
        currentReport = getReport(
          currentPosition,
          currentDirection,
          currentReport
        );
        break;
      default:
        if (command !== '') {
          setShowError('Error: Invalid command');
        }
    }
  };

  const runCommands = () => {
    setReport('');
    setShowError('');
    currentReport = '';
    if (commands === '') {
      setShowError('Error: Please enter a command');
      return;
    }
    const splitCommands = commands.split('\n');
    let hasPlaceCommand = false;
    // process each command individually
    splitCommands.forEach((command) => {
      //only start processing commands when we first detect a PLACE command
      if (hasPlaceCommand || placeCommandRegex.test(command)) {
        hasPlaceCommand = true;
        processCommand(command.replace(/\s+$/, '')); //remove trailing spaces
      }
    });

    if (!hasPlaceCommand)
      setShowError(
        'Error: Please enter a valid PLACE command within the table dimensions (5x5)'
      );

    setReport(currentReport);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Toy robot simulator</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Toy Robot Simulator</h1>

        <CommandsInputTextArea
          data-testid='commands-input'
          maxRows={4}
          aria-label='maximum height'
          placeholder='Enter commands here'
          style={{ width: 300, height: 200 }}
          value={commands}
          onChange={(e) => setCommands(e.target.value)}
        />
        <Button
          variant='outlined'
          data-testid='run-button'
          onClick={runCommands}
          style={{ marginTop: '10px' }}
        >
          Run
        </Button>
        {report !== '' && (
          <p data-testid='report-text' className='reportText'>
            {report}
          </p>
        )}
        {showError !== '' && (
          <Alert severity='error' style={{ marginTop: '10px' }}>
            {showError}
          </Alert>
        )}
      </main>
    </div>
  );
}

const CommandsInputTextArea = styled(TextareaAutosize)`
  text-transform: uppercase;
`;
